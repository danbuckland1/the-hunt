{"version":3,"sources":["components/Wrapper/Wrapper.js","firebase.js","components/Navbar/Navbar.js","components/StreamChat/StreamChat.js","pages/Activity.js","components/Jumbotron/Jumbotron.js","components/CreateGame/CreateGame.js","components/JoinGame/JoinGame.js","components/LoginGame/LoginGame.js","components/GoogleButton/GoogleButton.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Navbar","id","StreamChat","_this","this","Object","keys","details","map","key","teamName","text","placeholder","onBlur","captureUser","captureMsg","onClick","handleMsgSubmit","type","Component","database","ref","Activity","state","team","txt","chatHistory","captureTeam","event","target","value","setState","preventDefault","message","push","console","log","_this2","on","snapshot","val","newChatHistory","i","length","k","components_Wrapper_Wrapper","components_Navbar_Navbar","components_StreamChat_StreamChat","Jumbotron","CreateGame","action","Link","to","JoinGame","LoginGame","GoogleButton","href","App","isLoggedIn","handleLogin","pages_Activity","components_Jumbotron_Jumbotron","BrowserRouter","Route","exact","path","render","components_GoogleButton_GoogleButton","handleauth","components_CreateGame_CreateGame","components_JoinGame_JoinGame","components_LoginGame_LoginGame","Boolean","window","location","hostname","match","ReactDOM","Switch","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b226972d.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import firebase from 'firebase'\n\n//Config needed to intialize firebase\nconst config = {\n  apiKey: \"AIzaSyDMcDPdBpIkofIb9AvOTtB3EzLu5wKAnkg\",\n  authDomain: \"the-hunt-stream-chat.firebaseapp.com\",\n  databaseURL: \"https://the-hunt-stream-chat.firebaseio.com\",\n  projectId: \"the-hunt-stream-chat\",\n  storageBucket: \"the-hunt-stream-chat.appspot.com\",\n  messagingSenderId: \"823445327530\"\n};\n\n//Initialize firebase\nconst fire = firebase.initializeApp(config);\n\nexport default fire;","import React from \"react\";\nimport \"./Navbar.css\";\n\nconst Navbar = props => (\n\n    <nav className=\"navbar navbar-expand navbar-light bg-light\">\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul className=\"navbar-nav\">\n                <li className=\"nav-item\">\n                    <p>Activity Stream</p>\n                </li>\n                <li className=\"nav-item\">\n                    <p>Leaderboard</p>\n                </li>\n                <li className=\"nav-item\">\n                    <p>Challenges</p>\n                </li>\n                <li className=\"nav-item\">\n                    <p>X</p>\n                </li>\n            </ul>\n        </div>\n    </nav>\n\n);\n\nexport default Navbar;","import React, { Component } from \"react\";\n// import \"./StreamChat.css\";\n\nclass StreamChat extends Component{\n    render(){\n        return (\n            <div className=\"stream-chat\">\n                <div id=\"streamWindow\"> \n                {Object.keys(this.props.details).map(key => \n                    \n                        <p key={key}>\n                        {this.props.details[key].teamName + \": \" + this.props.details[key].text} \n                        </p>\n                    \n                    )}\n                </div>\n                <hr />\n                <form>\n                    <input id=\"username\" placeholder=\"Name\" onBlur={this.props.captureUser}></input>\n                    <input id=\"message\" placeholder=\"Message\" onBlur={this.props.captureMsg}></input>\n                    <button onClick={this.props.handleMsgSubmit} type=\"button\" className=\"btn btn-success\" id=\"chat-btn\">Send</button>\n                    </form>\n            </div>\n    \n            )    \n    }\n\n}\n\n\n\n\n\n\nexport default StreamChat;","import React, { Component } from \"react\";\nimport fire from \"../firebase.js\";\nimport Wrapper from \"../components/Wrapper\";\nimport Navbar from \"../components/Navbar\";\nimport StreamChat from \"../components/StreamChat\";\n\n//references the firebase database\nconst database = fire.database().ref(\"log\");\n\n\nclass Activity extends Component {\n    //Sets State\n    state = {\n        team: \"\",\n        txt: \"\",\n        chatHistory: {}\n    }\n    \n\n    //Will update chatHistory state when component mounts\n    //This will create an object that gets passed along to the StreamChat component \n    componentDidMount() {\n        //Pulls snapshot of firebase\n        database.on(\"value\", snapshot => {\n            let log = snapshot.val();\n            let keys = Object.keys(log);\n            //Array that will hold the chat history\n            let newChatHistory = [];\n            for (let i = 0; i < keys.length; i++) {\n                let k = keys[i];\n                let teamName = log[k].teamName;\n                let text = log[k].text;\n                //Add messages to chatHistory array\n                newChatHistory.push({\n                    id: k,\n                    teamName: teamName,\n                    text: text\n                });\n            }\n            //Update state to match the chatHistory\n            this.setState({\n                chatHistory: newChatHistory\n            })\n            //Log what state looks like in console\n            console.log(this.state.chatHistory);\n        });\n    }\n\n    //Captures Username from input field\n    captureTeam = (event) => \n    {\n        let team = event.target.value;\n        //adds username to the state\n        this.setState({\n            team: team\n        });\n    };\n\n    //Captures Message from input field\n    captureMsg = (event) => \n    {\n        let txt = event.target.value;\n        //adds message to the state\n        this.setState({\n            txt: txt\n        }); \n    };\n\n\n    //Takes captured team/message and sends it to firebase\n    handleMsgSubmit = (event) => {\n        event.preventDefault();\n        //Create chat object that will take the username/text from the state\n        let message = {\n            teamName: this.state.team,\n            text: this.state.txt\n        };\n        //pushes message object to firebase\n        database.push(message);\n        //clears the state for future messages\n        this.setState({\n            team: \"\",\n            txt: \"\"\n        });\n        console.log(\"submitted!\");\n    };\n    \n    //Renders to page\n    render(){\n        return (\n            <Wrapper>\n                <Navbar />\n                    <StreamChat\n                        captureUser={this.captureTeam}\n                        captureMsg={this.captureMsg} \n                        handleMsgSubmit={this.handleMsgSubmit} \n                        // key = {key}\n                        details={this.state.chatHistory}\n                        // id={chatHistory.id}\n                        // teamName = {chatHistory.teamName}\n                        // text = {chatHistory.text}\n                        />\n                {/* Piece of code that doens't cause errors */}\n                {/* <StreamChat\n                        captureUser={this.captureTeam}\n                        captureMsg={this.captureMsg} \n                        handleMsgSubmit={this.handleMsgSubmit}\n                    /> */}\n            </Wrapper>\n        );\n    };\n\n\n\n}//End Activity Class\n\nexport default Activity;","import React from \"react\";\nimport \"./Jumbotron.css\";\n\nconst Jumbotron = () => (\n    <div className=\"jumbotron jumbotron-fluid\">\n        <div className=\"container\">\n            <h1 className=\"display-4\" id=\"title\">The Hunt</h1>\n            <p id=\"lead\">A Scavenger Hunt tool for friends and family!</p>\n        </div>\n    </div>\n);\n\nexport default Jumbotron;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n\nconst CreateGame = props => (\n    <div className=\"Create\">\n        <h4 className=\"login-header\">Create a Game</h4>\n            <label>Game Name:</label>\n            <input className=\"form-control\" id=\"game-name\"></input>\n            <label>Game Password (Optional):</label>\n            <input className=\"form-control\" id=\"game-pw\"></input>\n        <h4 className=\"login-header\">Create a Team</h4>\n            <label>Team Name:</label>\n            <input className=\"form-control\" id=\"team-name\"></input>\n            <label>Team Password:</label>\n            <input className=\"form-control\" id=\"team-pw\"></input>\n        <button onClick={props.action} type=\"button\" className=\"btn btn-success\" id=\"play-btn\">Let's Play</button>\n        \n        <p>\n            <Link to=\"/join\">Join a Game </Link> \n            or <Link to=\"/login\">Login</Link>\n        </p>\n    </div>\n);\n\nexport default CreateGame;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst JoinGame = props => (\n    <div className=\"Join\">\n        <h4 className=\"login-header\">Join a Game</h4>\n            <label>Game ID:</label>\n            <input className=\"form-control\" id=\"game-id\"></input>\n            <label>Game Password (Optional):</label>\n            <input className=\"form-control\" id=\"game-pw\"></input>\n        <h4 className=\"login-header\">Create a Team</h4>\n            <label>Team Name:</label>\n            <input className=\"form-control\" id=\"team-name\"></input>\n            <label>Team Password:</label>\n            <input className=\"form-control\" id=\"team-pw\"></input>\n        <button onClick={props.action} type=\"button\" className=\"btn btn-success\" id=\"play-btn\">Let's Play</button>\n        <p>\n            <Link to=\"/\">Create a Game </Link> \n            or <Link to=\"/login\">Login</Link></p>\n    </div>\n);\n\nexport default JoinGame;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst LoginGame = props => (\n    <div className=\"Login\">\n        <h4 className=\"login-header\">Team Login</h4>\n            <label>Team Name:</label>\n            <input className=\"form-control\" id=\"team-name\"></input>\n            <label>Team Password:</label>\n            <input className=\"form-control\" id=\"team-pw\"></input>\n        <button onClick={props.action} type=\"button\" className=\"btn btn-success\" id=\"play-btn\">Let's Play</button>\n        <p>\n            <Link to=\"/\">Create </Link> \n            or <Link to=\"/join\">Join</Link> a Game</p>\n    </div>\n);\n\nexport default LoginGame;","import React from \"react\";\nimport './GoogleButton.css'\n\nconst GoogleButton = () => (\n        <div>\n        <div className = \"btnDiv\">\n        <a className=\"google-btn\" href=\"/auth/google\"> Login with Google</a>\n        </div>\n        </div>\n);\n\nexport default GoogleButton;\n\n","//Dependencies\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n//Components\nimport Wrapper from \"./components/Wrapper\";\nimport Activity from \"./pages/Activity\";\nimport Jumbotron from \"./components/Jumbotron\";\n//Create/Join/Login form components\nimport CreateGame from \"./components/CreateGame\";\nimport JoinGame from \"./components/JoinGame\";\nimport LoginGame from \"./components/LoginGame\";\n//Google Button\nimport GoogleButton from \"./components/GoogleButton\";\n//CSS file\nimport './App.css';\n\n\n\n\nclass App extends Component {\n    //sets state of app to not logged in by default\n    //KE Note: This is a temporary setup to test and see that the right page renders when a user is logged in.  We can change the setup as we incorporate authentication\n    state = {\n      isLoggedIn: false\n  }\n\n  //KE Note: Temporary function that will change isLoggedIn state to true when called on.  We can change this later on.\n   handleLogin = () => {\n    this.setState({\n      isLoggedIn: true\n    });\n  }\n\n\n  render() {\n    //Conditional rendering\n    //If state is logged in then render the Activity Stream page\n    if(this.state.isLoggedIn){\n      return (\n        <Wrapper>\n          <Activity />\n        </Wrapper>\n      );\n\n    }\n    //If state is NOT logged in then render homepage (with the logins)\n    else {\n      return (\n        <Wrapper>\n        <Jumbotron />\n        <Router>\n          <div className=\"dynamicForm\">\n          {/* Passes along handleLogin function as a prop to CreateGame component */}\n          <Route exact path=\"/\" render = {() => <GoogleButton action={this.handleauth}/> }/>\n          <Route exact path=\"/create\" render = {() => <CreateGame action={this.handleLogin}/> }/>\n          <Route exact path=\"/join\" render = {() => <JoinGame action={this.handleLogin}/> }/>\n          <Route exact path=\"/login\" render = {() => <LoginGame action={this.handleLogin}/> }/>\n          </div>\n        </Router>\n        </Wrapper>\n      );\n    }\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Route, Switch } from \"react-router-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n     <Switch>\n      <Route path=\"/\" component={App} />\n     </Switch>\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n   );\n   serviceWorker.unregister();"],"sourceRoot":""}