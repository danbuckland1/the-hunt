{"ast":null,"code":"import _classCallCheck from \"/Users/honeylo0ksfuhnee/Documents/Rutgers_Boot_Camp/the-hunt/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/honeylo0ksfuhnee/Documents/Rutgers_Boot_Camp/the-hunt/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/honeylo0ksfuhnee/Documents/Rutgers_Boot_Camp/the-hunt/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/honeylo0ksfuhnee/Documents/Rutgers_Boot_Camp/the-hunt/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/honeylo0ksfuhnee/Documents/Rutgers_Boot_Camp/the-hunt/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/honeylo0ksfuhnee/Documents/Rutgers_Boot_Camp/the-hunt/client/src/components/Challenge/Challenge.js\";\nimport React, { Component, Fragment } from \"react\";\nimport axios from \"axios\";\nimport \"./Challenge.css\";\nimport Challenges from \"../TeamDash/challenges.json\";\n\nvar Challenge =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Challenge, _Component);\n\n  function Challenge() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Challenge);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Challenge)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selectedImg: null,\n      index: 0\n    };\n\n    _this.handleImgSelect = function (event) {\n      _this.setState({\n        selectedImg: event.target.files[0]\n      });\n    };\n\n    _this.handleImgUpload = function () {\n      var cloudinaryURL = \"https://api.cloudinary.com/v1_1/de3mokru1/upload\";\n      var cloudinaryUploadPreset = \"wphwy703\";\n      var formData = new FormData();\n      formData.append(\"file\", _this.state.selectedImg);\n      formData.append(\"upload_preset\", cloudinaryUploadPreset);\n      axios({\n        url: cloudinaryURL,\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        data: formData\n      }).then(function (res) {\n        console.log(res.data.secure_url);\n      }).catch(function (err) {\n        console.error(err);\n      });\n    };\n\n    _this.index = _this.props.location.state.challID - 1;\n\n    _this.handleStatus = function (complete) {\n      if (!complete) {\n        var status = \"Completed\";\n        return status;\n      } else {\n        var _status = \"Not Completed\";\n        return _status;\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Challenge, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount(props) {\n      this.setState({\n        index: this.props.location.state.challID - 1\n      });\n    } //====================CLOUDINARY FUNCTIONS====================\n    //function that sets state to selected image (before upload)\n\n  }, {\n    key: \"render\",\n    value: function render(index) {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, console.log(\"\".concat(Challenges[this.state.index].complete)), React.createElement(\"div\", {\n        className: \"page-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, Challenges[this.state.index].title)), React.createElement(\"div\", {\n        className: \"challenge-view\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"challenge-properties\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Status:\"), \" \", this.handleStatus(\"\".concat(Challenges[this.state.index].complete))), React.createElement(\"p\", {\n        className: \"challenge-desc\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, Challenges[this.state.index].description)), React.createElement(\"div\", {\n        className: \"img-upload\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.handleImgSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.handleImgUpload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Upload\"))));\n    }\n  }]);\n\n  return Challenge;\n}(Component);\n\nexport default Challenge;","map":{"version":3,"sources":["/Users/honeylo0ksfuhnee/Documents/Rutgers_Boot_Camp/the-hunt/client/src/components/Challenge/Challenge.js"],"names":["React","Component","Fragment","axios","Challenges","Challenge","state","selectedImg","index","handleImgSelect","event","setState","target","files","handleImgUpload","cloudinaryURL","cloudinaryUploadPreset","formData","FormData","append","url","method","headers","data","then","res","console","log","secure_url","catch","err","error","props","location","challID","handleStatus","complete","status","title","description"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from \"react\";\nimport axios from \"axios\";\nimport \"./Challenge.css\";\nimport Challenges from \"../TeamDash/challenges.json\";\n\nclass Challenge extends Component {\n    state = {\n        selectedImg: null,\n        index: 0\n    }\n    \n    componentDidMount(props){\n        this.setState({\n            index: this.props.location.state.challID-1\n        })\n    }\n\n//====================CLOUDINARY FUNCTIONS====================\n    //function that sets state to selected image (before upload)\n    handleImgSelect = event => {\n        this.setState({\n            selectedImg: event.target.files[0]\n        })\n    }\n\n    //function that uploads selected image to cloudinary\n    handleImgUpload = () => {\n        const cloudinaryURL = \"https://api.cloudinary.com/v1_1/de3mokru1/upload\";\n        const cloudinaryUploadPreset = \"wphwy703\";\n        let formData = new FormData();\n        formData.append(\"file\", this.state.selectedImg);\n        formData.append(\"upload_preset\", cloudinaryUploadPreset);\n\n        axios({\n            url: cloudinaryURL,\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            data: formData\n        }).then( (res) => {\n            console.log(res.data.secure_url);\n        }).catch( (err) => {\n            console.error(err);\n        });\n    }\n//====================END CLOUDINARY FUNCTIONS====================\n\nindex = this.props.location.state.challID-1;\n\n        handleStatus = (complete) => {\n            if(!complete){\n                let status = \"Completed\";\n                return status;\n            }\n            else {\n                let status = \"Not Completed\";\n                return status;\n            }\n        }\n\n    render(index){\n        return ( \n        <Fragment>\n            {console.log(`${Challenges[this.state.index].complete}`)}\n            <div className=\"page-header\">\n                <h5>{Challenges[this.state.index].title}</h5>\n            </div>\n            <div className=\"challenge-view\">\n                <div className=\"challenge-properties\">\n                    <p className=\"status\"><b>Status:</b> {this.handleStatus(`${Challenges[this.state.index].complete}`)}</p>\n                    <p className=\"challenge-desc\">{Challenges[this.state.index].description}</p>\n                </div>\n                <div className=\"img-upload\">\n                <input type=\"file\"onChange={this.handleImgSelect} />\n                <button onClick={this.handleImgUpload}>Upload</button>\n                </div>\n            </div>\n        </Fragment>\n        )\n    }\n}\n\nexport default Challenge;"]},"metadata":{},"sourceType":"module"}