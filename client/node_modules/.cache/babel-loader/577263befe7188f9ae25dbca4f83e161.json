{"ast":null,"code":"import _classCallCheck from \"/Users/dandp/Desktop/the-hunt/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dandp/Desktop/the-hunt/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dandp/Desktop/the-hunt/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dandp/Desktop/the-hunt/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dandp/Desktop/the-hunt/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dandp/Desktop/the-hunt/client/src/components/TeamDash/TeamDash.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Challenges from \"./challenges.json\";\nimport \"./TeamDash.css\";\n\nvar TeamDash =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TeamDash, _Component);\n\n  function TeamDash() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TeamDash);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TeamDash)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleStatus = function () {\n      if (Challenges.complete) {\n        var status = \"Completed\";\n        return console.log(status);\n      } else {\n        var _status = \"Not Completed\";\n        return console.log(_status);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(TeamDash, [{\n    key: \"componentDidMount\",\n    //Conditions for rendering this page\n    //Challenge list is being generated from a .json file, instead we will need to pull it from the database\n    //When user logs in\n    //App will prompt user to create a game\n    //Game record will be created in Game table\n    //Team record will be created in Team table\n    //Link Team record with Game Record\n    //Generate a set of 10 challenges with IDs unique to Team and Game from a challenge template\n    //TeamDash will render challenges to page based on what is pulled from the database\n    //We will name Game ID\n    //We will need Team ID\n    value: function componentDidMount() {// console.log(this.props.match);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"page-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Team Dashboard\")), React.createElement(\"div\", {\n        className: \"challenges-listview\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, Challenges.map(function (Challenges) {\n        return React.createElement(\"div\", {\n          key: Challenges.id,\n          id: Challenges.id,\n          className: \"challenge-div\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"\".concat(_this2.props.match.url, \"/\").concat(Challenges.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, React.createElement(\"h6\", {\n          className: \"challenge-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, Challenges.title)), React.createElement(\"p\", {\n          className: \"status\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, \"Completed:\"), \" \", JSON.stringify(\"\".concat(Challenges.complete)).replace(/\"/g, \"\")), React.createElement(\"p\", {\n          className: \"challenge-desc\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, Challenges.description));\n      })));\n    }\n  }]);\n\n  return TeamDash;\n}(Component); //End TeamDash Component\n\n\nexport default TeamDash;","map":{"version":3,"sources":["/Users/dandp/Desktop/the-hunt/client/src/components/TeamDash/TeamDash.js"],"names":["React","Component","Fragment","Link","Challenges","TeamDash","handleStatus","complete","status","console","log","map","id","props","match","url","title","JSON","stringify","replace","description"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAO,gBAAP;;IAGMC,Q;;;;;;;;;;;;;;;;;;UAmBFC,Y,GAAe,YAAM;AACjB,UAAGF,UAAU,CAACG,QAAd,EAAuB;AACnB,YAAIC,MAAM,GAAG,WAAb;AACA,eAAOC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAAP;AACH,OAHD,MAIK;AACD,YAAIA,OAAM,GAAG,eAAb;AACA,eAAOC,OAAO,CAACC,GAAR,CAAYF,OAAZ,CAAP;AACH;AACJ,K;;;;;;;AA1BD;AACA;AACI;AACI;AACA;AACA;AACI;AACA;AACJ;AACR;AACA;wCAGoB,CAChB;AACH;;;6BAaO;AAAA;;AACJ,aACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,CADJ,EAII;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACCJ,UAAU,CAACO,GAAX,CAAgB,UAACP,UAAD;AAAA,eACb;AAAK,UAAA,GAAG,EAAEA,UAAU,CAACQ,EAArB;AAAyB,UAAA,EAAE,EAAER,UAAU,CAACQ,EAAxC;AAA4C,UAAA,SAAS,EAAC,eAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,IAAD;AAAM,UAAA,EAAE,YAAM,MAAI,CAACC,KAAL,CAAWC,KAAX,CAAiBC,GAAvB,cAA8BX,UAAU,CAACQ,EAAzC,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAwD;AAAI,UAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAiCR,UAAU,CAACY,KAA5C,CAAxD,CADJ,EAEI;AAAG,UAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAtB,OAAyCC,IAAI,CAACC,SAAL,WAAkBd,UAAU,CAACG,QAA7B,GAAyCY,OAAzC,CAAiD,IAAjD,EAAuD,EAAvD,CAAzC,CAFJ,EAGI;AAAG,UAAA,SAAS,EAAC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA+Bf,UAAU,CAACgB,WAA1C,CAHJ,CADa;AAAA,OAAhB,CADD,CAJJ,CADJ;AAgBH;;;;EA/CkBnB,S,GAkDtB;;;AAED,eAAeI,QAAf","sourcesContent":["import React, {Component, Fragment} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Challenges from \"./challenges.json\";\nimport \"./TeamDash.css\";\n\n\nclass TeamDash extends Component{\n\n    //Conditions for rendering this page\n    //Challenge list is being generated from a .json file, instead we will need to pull it from the database\n        //When user logs in\n            //App will prompt user to create a game\n            //Game record will be created in Game table\n            //Team record will be created in Team table\n                //Link Team record with Game Record\n                //Generate a set of 10 challenges with IDs unique to Team and Game from a challenge template\n            //TeamDash will render challenges to page based on what is pulled from the database\n    //We will name Game ID\n    //We will need Team ID\n\n\n    componentDidMount() {\n        // console.log(this.props.match);\n    }\n\n    handleStatus = () => {\n        if(Challenges.complete){\n            let status = \"Completed\";\n            return console.log(status);\n        }\n        else {\n            let status = \"Not Completed\";\n            return console.log(status);\n        }\n    }\n\n    render(){\n        return (\n            <Fragment>\n                <div className=\"page-header\">\n                    <h5>Team Dashboard</h5>\n                </div>\n                <div className=\"challenges-listview\">\n                {Challenges.map( (Challenges) => \n                    <div key={Challenges.id} id={Challenges.id} className=\"challenge-div\">\n                        <Link to={ `${this.props.match.url}/${Challenges.id}` }><h6 className=\"challenge-title\">{Challenges.title}</h6></Link>\n                        <p className=\"status\"><b>Completed:</b> {JSON.stringify(`${Challenges.complete}`).replace(/\"/g, \"\")}</p>\n                        <p className=\"challenge-desc\">{Challenges.description}</p>\n                    </div>\n                )}\n                </div>\n            </Fragment>\n        )\n    }\n\n\n}//End TeamDash Component\n\nexport default TeamDash;\n\n"]},"metadata":{},"sourceType":"module"}