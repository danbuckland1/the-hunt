{"ast":null,"code":"import _classCallCheck from \"/Users/honeylo0ksfuhnee/Documents/Rutgers_Boot_Camp/the-hunt/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/honeylo0ksfuhnee/Documents/Rutgers_Boot_Camp/the-hunt/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/honeylo0ksfuhnee/Documents/Rutgers_Boot_Camp/the-hunt/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/honeylo0ksfuhnee/Documents/Rutgers_Boot_Camp/the-hunt/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/honeylo0ksfuhnee/Documents/Rutgers_Boot_Camp/the-hunt/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/honeylo0ksfuhnee/Documents/Rutgers_Boot_Camp/the-hunt/client/src/components/StreamChat/StreamChat.js\";\nimport React, { Component, Fragment } from \"react\";\nimport fire from \"../../firebase.js\";\nimport \"./StreamChat.css\"; //references the firebase database\n\nvar database = fire.database().ref(\"log\");\n\nvar StreamChat =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StreamChat, _Component);\n\n  _createClass(StreamChat, [{\n    key: \"componentDidMount\",\n    //==========================================================================\n    //Sets State\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //Pulls snapshot of firebase\n      database.on(\"value\", function (snapshot) {\n        var log = snapshot.val();\n        var keys = Object.keys(log); //Array that will hold the chat history\n\n        var newChatHistory = [];\n\n        for (var i = 0; i < keys.length; i++) {\n          var k = keys[i];\n          var teamName = log[k].teamName;\n          var text = log[k].text; //Add messages to chatHistory array\n\n          newChatHistory.push({\n            id: k,\n            teamName: teamName,\n            text: text\n          });\n        } //Update state to match the chatHistory\n\n\n        _this2.setState({\n          chatHistory: newChatHistory\n        }); //Log what state looks like in console\n        // console.log(this.state.chatHistory);\n\n      });\n    } //Captures Username from input field\n\n  }]);\n\n  //==========================================================================\n  function StreamChat(props) {\n    var _this;\n\n    _classCallCheck(this, StreamChat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StreamChat).call(this, props)); //Creates reference so chat window will scroll to this point\n\n    _this.state = {\n      team: \"\",\n      txt: \"\",\n      chatHistory: {} //Will update chatHistory state when component mounts\n      //This will create an object that gets passed along to the StreamChat component \n\n    };\n\n    _this.captureTeam = function (event) {\n      var team = event.target.value; //adds username to the state\n\n      _this.setState({\n        team: team\n      });\n    };\n\n    _this.captureMsg = function (event) {\n      var txt = event.target.value; //adds message to the state\n\n      _this.setState({\n        txt: txt\n      });\n    };\n\n    _this.handleMsgSubmit = function (event) {\n      event.preventDefault(); //Create chat object that will take the username/text from the state\n\n      var message = {\n        teamName: _this.state.team,\n        text: _this.state.txt\n      }; //pushes message object to firebase\n\n      database.push(message); //clears the state for future messages\n\n      _this.setState({\n        team: \"\",\n        txt: \"\"\n      });\n\n      console.log(\"submitted!\");\n    };\n\n    _this.updateScroll = function () {\n      var element = _this.myRef.current;\n      element.scrollTop = element.scrollHeight;\n    };\n\n    _this.componentDidUpdate = function () {\n      _this.updateScroll();\n    };\n\n    _this.myRef = React.createRef();\n    return _this;\n  } //==========================================================================\n  //BEGIN - SCROLL TO BOTTOM OF CHAT FUNCTIONALTIY\n  //Function that scrolls to the bottom of chat\n\n\n  _createClass(StreamChat, [{\n    key: \"render\",\n    //END - SCROLL TO BOTTOM OF CHAT FUNCTIONALTIY\n    //==========================================================================\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"page-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Activity Stream\")), React.createElement(\"div\", {\n        className: \"stream-chat\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"streamWindow\",\n        ref: this.myRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, Object.keys(this.props.details).map(function (key) {\n        return React.createElement(\"p\", {\n          key: key,\n          className: \"chat-messages\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, _this3.props.details[key].teamName + \": \"), _this3.props.details[key].text);\n      })), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"username\",\n        placeholder: \"Name\",\n        onBlur: this.props.captureUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        id: \"message\",\n        placeholder: \"Message\",\n        onBlur: this.props.captureMsg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.props.handleMsgSubmit,\n        type: \"button\",\n        className: \"btn btn-success\",\n        id: \"chat-btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Send\"))));\n    }\n  }]);\n\n  return StreamChat;\n}(Component);\n\nexport default StreamChat;","map":{"version":3,"sources":["/Users/honeylo0ksfuhnee/Documents/Rutgers_Boot_Camp/the-hunt/client/src/components/StreamChat/StreamChat.js"],"names":["React","Component","Fragment","fire","database","ref","StreamChat","on","snapshot","log","val","keys","Object","newChatHistory","i","length","k","teamName","text","push","id","setState","chatHistory","props","state","team","txt","captureTeam","event","target","value","captureMsg","handleMsgSubmit","preventDefault","message","console","updateScroll","element","myRef","current","scrollTop","scrollHeight","componentDidUpdate","createRef","details","map","key","captureUser"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport fire from \"../../firebase.js\";\nimport \"./StreamChat.css\";\n\n//references the firebase database\nconst database = fire.database().ref(\"log\");\n\nclass StreamChat extends Component{\n\n    //==========================================================================\n    //Sets State\n    state = {\n        team: \"\",\n        txt: \"\",\n        chatHistory: {}\n    }\n\n    //Will update chatHistory state when component mounts\n    //This will create an object that gets passed along to the StreamChat component \n    componentDidMount() {\n        //Pulls snapshot of firebase\n        database.on(\"value\", snapshot => {\n            let log = snapshot.val();\n            let keys = Object.keys(log);\n            //Array that will hold the chat history\n            let newChatHistory = [];\n            for (let i = 0; i < keys.length; i++) {\n                let k = keys[i];\n                let teamName = log[k].teamName;\n                let text = log[k].text;\n                //Add messages to chatHistory array\n                newChatHistory.push({\n                    id: k,\n                    teamName: teamName,\n                    text: text\n                });\n            }\n            //Update state to match the chatHistory\n            this.setState({\n                chatHistory: newChatHistory\n            })\n            //Log what state looks like in console\n            // console.log(this.state.chatHistory);\n        });\n    }\n\n    //Captures Username from input field\n    captureTeam = (event) => \n    {\n        let team = event.target.value;\n        //adds username to the state\n        this.setState({\n            team: team\n        });\n    };\n\n    //Captures Message from input field\n    captureMsg = (event) => \n    {\n        let txt = event.target.value;\n        //adds message to the state\n        this.setState({\n            txt: txt\n        }); \n    };\n\n    //Takes captured team/message and sends it to firebase\n    handleMsgSubmit = (event) => {\n        event.preventDefault();\n        //Create chat object that will take the username/text from the state\n        let message = {\n            teamName: this.state.team,\n            text: this.state.txt\n        };\n        //pushes message object to firebase\n        database.push(message);\n        //clears the state for future messages\n        this.setState({\n            team: \"\",\n            txt: \"\"\n        });\n        console.log(\"submitted!\");\n    };\n\n\n    //==========================================================================\n\n    constructor(props) {\n        super(props);\n        //Creates reference so chat window will scroll to this point\n        this.myRef = React.createRef();\n      }\n    //==========================================================================\n    //BEGIN - SCROLL TO BOTTOM OF CHAT FUNCTIONALTIY\n    //Function that scrolls to the bottom of chat\n    updateScroll = () => {\n        var element = this.myRef.current;\n        element.scrollTop = element.scrollHeight;\n    }\n\n    //Calls on function to scroll to bottom of chat when component updates\n    componentDidUpdate =() =>{\n        this.updateScroll();\n    }\n    //END - SCROLL TO BOTTOM OF CHAT FUNCTIONALTIY\n    //==========================================================================\n\n    render(){\n        return (\n            <Fragment>\n                <div className=\"page-header\">\n                    <h5>Activity Stream</h5>\n                 </div>\n                <div className=\"stream-chat\">\n                    <div id=\"streamWindow\" ref={this.myRef}> \n                    {Object.keys(this.props.details).map(key => \n                        <p key={key} className=\"chat-messages\">\n                        <b>{this.props.details[key].teamName + \": \"}</b>{this.props.details[key].text} \n                        </p>\n\n                    )}\n                    </div>\n                    <form>\n                        <input id=\"username\" placeholder=\"Name\" onBlur={this.props.captureUser}></input>\n                        <input id=\"message\" placeholder=\"Message\" onBlur={this.props.captureMsg}></input>\n                        <button onClick={this.props.handleMsgSubmit} type=\"button\" className=\"btn btn-success\" id=\"chat-btn\">Send</button>\n                        </form>\n                </div>\n            </Fragment>\n    \n        )    \n    }\n\n}\n\n\n\n\n\n\nexport default StreamChat;"]},"metadata":{},"sourceType":"module"}