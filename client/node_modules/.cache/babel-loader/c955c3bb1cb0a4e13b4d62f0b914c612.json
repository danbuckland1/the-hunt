{"ast":null,"code":"import _classCallCheck from \"/Users/honeylo0ksfuhnee/Documents/Rutgers_Boot_Camp/the-hunt/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/honeylo0ksfuhnee/Documents/Rutgers_Boot_Camp/the-hunt/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/honeylo0ksfuhnee/Documents/Rutgers_Boot_Camp/the-hunt/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/honeylo0ksfuhnee/Documents/Rutgers_Boot_Camp/the-hunt/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/honeylo0ksfuhnee/Documents/Rutgers_Boot_Camp/the-hunt/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/honeylo0ksfuhnee/Documents/Rutgers_Boot_Camp/the-hunt/client/src/components/JoinGame/JoinGame.js\";\nimport React, { Fragment, Component } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport Jumbotron from \"../Jumbotron/Jumbotron\";\nimport \"../CreateGame/CreateGame.css\";\nimport API from \"../../utils/API\";\n\nvar JoinGame =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(JoinGame, _Component);\n\n  function JoinGame() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, JoinGame);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(JoinGame)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      teamID: \"\",\n      teamName: \"\" //Function that checks to see if Team Name already exists in database\n\n    };\n\n    _this.handleTeamCheck = function (dbGameID, dbTeamName) {\n      var teamNums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; //Loop through array of numbers until....\n\n      for (var i = 0; i < teamNums.length; i++) {\n        var teamName = \"Team \" + teamNums[i];\n\n        if (_this.props.gameID === dbGameID && teamName === dbTeamName) {} // console.log(\"Match\" + [i])\n        //...You reach a Teamnumber that doesn't yet exist in the database and return that\n        else {\n            return teamName;\n          }\n      }\n    };\n\n    _this.handleJoinGame = function () {\n      //Check to see if game exists\n      API.pullGame(_this.props.gameID).then(function (res) {\n        // console.log(\"Pull Game: \" + res);\n        //If it does...\n        if (!res) {\n          alert(\"Game does not exist.  Please check ID.\");\n        } //END of if(res)\n        else {\n            console.log(\"Match\");\n          }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(JoinGame, [{\n    key: \"render\",\n    // //Do a Teamname and Game ID Check and generate a Team Name that doesn't exist\n    // API.pullTeam(\"Team 1\")\n    // .then (res => {\n    //     let newTeamName = this.handleTeamCheck(res.data.gameID, res.data.teamName);\n    //     this.setState ({\n    //         teamName: newTeamName\n    //     });\n    // })\n    // //Then take new Team Name in state and create a new Team with it while also associating proper gameID\n    // .then (() => {\n    //     API.createTeam(this.state.teamName, this.props.gameID)\n    //     //store resulting teamID in state\n    //     .then( res => {\n    //         this.setState ({\n    //             teamID: res.data._id\n    //         });\n    //     })\n    // })\n    // .then( () => {\n    //     API.insertTeam(this.props.gameID, this.state.teamID)\n    // })\n    value: function render() {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"Join\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        className: \"login-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Join a Game\"), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Game ID:\"), React.createElement(\"input\", {\n        className: \"form-control\",\n        id: \"game-id\",\n        onBlur: this.props.handleCaptureGameID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.handleJoinGame,\n        type: \"button\",\n        className: \"btn btn-success\",\n        id: \"play-btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"Let's Play\"), React.createElement(\"p\", {\n        className: \"login-links\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Or \", React.createElement(Link, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Create a Game \"))));\n    }\n  }]);\n\n  return JoinGame;\n}(Component);\n\n;\nexport default JoinGame;","map":{"version":3,"sources":["/Users/honeylo0ksfuhnee/Documents/Rutgers_Boot_Camp/the-hunt/client/src/components/JoinGame/JoinGame.js"],"names":["React","Fragment","Component","Link","Redirect","Jumbotron","API","JoinGame","state","teamID","teamName","handleTeamCheck","dbGameID","dbTeamName","teamNums","i","length","props","gameID","handleJoinGame","pullGame","then","res","alert","console","log","handleCaptureGameID"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,kBAA/B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAO,8BAAP;AACA,OAAOC,GAAP,MAAgB,iBAAhB;;IAEMC,Q;;;;;;;;;;;;;;;;;UAMFC,K,GAAQ;AACJC,MAAAA,MAAM,EAAE,EADJ;AAEJC,MAAAA,QAAQ,EAAC,EAFL,CAKR;;AALQ,K;;UAMRC,e,GAAiB,UAACC,QAAD,EAAWC,UAAX,EAA0B;AACvC,UAAIC,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,EAA5B,CAAf,CADuC,CAEvC;;AACA,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGD,QAAQ,CAACE,MAA3B,EAAmCD,CAAC,EAApC,EAAuC;AACnC,YAAIL,QAAQ,GAAG,UAAUI,QAAQ,CAACC,CAAD,CAAjC;;AACA,YAAG,MAAKE,KAAL,CAAWC,MAAX,KAAsBN,QAAtB,IAAkCF,QAAQ,KAAKG,UAAlD,EAA6D,CAE5D,CAFD,CACI;AAEJ;AAHA,aAII;AACA,mBAAOH,QAAP;AACH;AACJ;AACJ,K;;UAIDS,c,GAAiB,YAAM;AACnB;AACAb,MAAAA,GAAG,CAACc,QAAJ,CAAa,MAAKH,KAAL,CAAWC,MAAxB,EACKG,IADL,CACU,UAAAC,GAAG,EAAI;AACT;AACA;AACA,YAAG,CAACA,GAAJ,EAAS;AACLC,UAAAA,KAAK,CAAC,wCAAD,CAAL;AAEH,SAHD,CAGC;AAHD,aAIK;AACDC,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AACJ,OAXL;AAaH,K;;;;;;;AAIL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;6BAGY;AACJ,aACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,EAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFR,EAGQ;AAAO,QAAA,SAAS,EAAC,cAAjB;AAAgC,QAAA,EAAE,EAAC,SAAnC;AAA6C,QAAA,MAAM,EAAE,KAAKR,KAAL,CAAWS,mBAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHR,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,EAMI;AAAQ,QAAA,OAAO,EAAE,KAAKP,cAAtB;AAAsC,QAAA,IAAI,EAAC,QAA3C;AAAoD,QAAA,SAAS,EAAC,iBAA9D;AAAgF,QAAA,EAAE,EAAC,UAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBANJ,EAQI;AAAG,QAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACO,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAC,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADP,CARJ,CAFJ,CADJ;AAiBH;;;;EAzFkBjB,S;;AA0FtB;AAED,eAAeK,QAAf","sourcesContent":["import React, { Fragment,Component } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport Jumbotron from \"../Jumbotron/Jumbotron\";\nimport \"../CreateGame/CreateGame.css\";\nimport API from \"../../utils/API\";\n\nclass JoinGame extends Component {\n\n    //If type ID brings up a result from API.pullgame\n        //then Create a Team\n        //then Insert team into game record\n        //then move user along into the game\n    state = {\n        teamID: \"\",\n        teamName:\"\"\n    }\n\n    //Function that checks to see if Team Name already exists in database\n    handleTeamCheck= (dbGameID, dbTeamName) => {\n        let teamNums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        //Loop through array of numbers until....\n        for (let i=0; i < teamNums.length; i++){\n            let teamName = \"Team \" + teamNums[i];\n            if(this.props.gameID === dbGameID && teamName === dbTeamName){\n                // console.log(\"Match\" + [i])\n            }\n            //...You reach a Teamnumber that doesn't yet exist in the database and return that\n            else{\n                return teamName;\n            }\n        }\n    }\n\n\n\n    handleJoinGame = () => {\n        //Check to see if game exists\n        API.pullGame(this.props.gameID)\n            .then(res => {\n                // console.log(\"Pull Game: \" + res);\n                //If it does...\n                if(!res) {\n                    alert(\"Game does not exist.  Please check ID.\");\n                    \n                }//END of if(res)\n                else {\n                    console.log(\"Match\");\n                }\n            })\n                \n    };\n\n\n\n// //Do a Teamname and Game ID Check and generate a Team Name that doesn't exist\n// API.pullTeam(\"Team 1\")\n// .then (res => {\n//     let newTeamName = this.handleTeamCheck(res.data.gameID, res.data.teamName);\n//     this.setState ({\n//         teamName: newTeamName\n//     });\n// })\n// //Then take new Team Name in state and create a new Team with it while also associating proper gameID\n// .then (() => {\n//     API.createTeam(this.state.teamName, this.props.gameID)\n//     //store resulting teamID in state\n//     .then( res => {\n//         this.setState ({\n//             teamID: res.data._id\n//         });\n//     })\n// })\n// .then( () => {\n//     API.insertTeam(this.props.gameID, this.state.teamID)\n// })\n\n\n    render(){\n        return(\n            <Fragment>\n                <Jumbotron />\n                <div className=\"Join\">\n                    <h4 className=\"login-header\">Join a Game</h4>\n                        <label>Game ID:</label>\n                        <input className=\"form-control\" id=\"game-id\" onBlur={this.props.handleCaptureGameID}></input>\n                    <br />\n                    {/* <Link to='/auth/google'> */}\n                    <button onClick={this.handleJoinGame} type=\"button\" className=\"btn btn-success\" id=\"play-btn\">Let's Play</button>\n                    {/* </Link> */}\n                    <p className=\"login-links\">\n                        Or <Link to=\"/\">Create a Game </Link> \n                    </p>\n                </div>\n            </Fragment>\n        )\n    }\n};\n\nexport default JoinGame;"]},"metadata":{},"sourceType":"module"}